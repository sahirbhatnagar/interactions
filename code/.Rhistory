aes(xintercept = log(value), colour = variable), size = 0.7, linetype = 1) +
geom_vline(data = d2[lambda.gamma==lambda.min.gamma & variable == "lambda.min"],
aes(xintercept = log(value), colour = variable),size = 0.7, linetype = 1) +
scale_color_discrete(name="") +
geom_text(aes(label = nz.main, x = log(lambda.beta), y = Inf, vjust = 1)) +
geom_text(aes(label = nz.interaction, x = log(lambda.beta), y = Inf,
vjust = 2)) +
ylab(c("10 fold CV MSE"))
l <- ggplot_build(p)
suppressMessages( p + ylim(c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.1)))
#suppressMessages(print(plt))
# cvobj = x
# xlab = "log(Lambda)"
# if (sign.lambda < 0)
#   xlab = paste("-", xlab, sep = "")
# plot.args = list(x = sign.lambda * log(cvobj$lambda.beta), y = cvobj$cvm,
#                  ylim = range(cvobj$cvup, cvobj$cvlo),
#                  #ylim = quantile(c(cvobj$cvlo, cvobj$cvup), probs = c(0,0.85)),
#                  xlab = xlab, ylab = cvobj$name,
#                  type = "n")
# new.args = list(...)
# if (length(new.args))
#   plot.args[names(new.args)] = new.args
# do.call("plot", plot.args)
# error.bars(sign.lambda * log(cvobj$lambda.beta), cvobj$cvup,
#            cvobj$cvlo, width = 0.01, col = "darkgrey")
# points(sign.lambda * log(cvobj$lambda.beta), cvobj$cvm, pch = 20,
#        col = "red")
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("main:",cvobj$nz.main),
#      tick = FALSE, line = 1)
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("interaction:",cvobj$nz.interaction),
#      tick = FALSE, line = 0)
# abline(v = sign.lambda * log(cvobj$lambda.min.beta), lty = 3)
# abline(v = sign.lambda * log(cvobj$lambda.1se.beta), lty = 3)
# invisible()
}
dev.off()
plot(cvfit)
plot.cv.shim <- function(x, sign.lambda = 1, ...) {
pckg = try(require(ggplot2))
if(!pckg) {
cat("Installing 'ggplot2' from CRAN\n")
getPckg("ggplot2")
require(ggplot2)
}
pckg = try(require(latex2exp))
if(!pckg) {
cat("Installing 'latex2exp' from CRAN\n")
getPckg("latex2exp")
require(latex2exp)
}
pckg = try(require(data.table))
if(!pckg) {
cat("Installing 'data.table' from CRAN\n")
getPckg("data.table")
require(data.table)
}
cvobj = x
d <- cvobj$df %>%
as.data.table %>%
mutate(lambda.min.beta = cvobj$lambda.min.beta,
lambda.min.gamma = cvobj$lambda.min.gamma,
lambda.1se.beta = cvobj$lambda.1se.beta,
lambda.1se.gamma = cvobj$lambda.1se.gamma)
# needed to get colored lines
d2 <- d[(lambda.beta==lambda.min.beta & lambda.gamma == lambda.min.gamma) |
(lambda.beta==lambda.1se.beta & lambda.gamma == lambda.1se.gamma)] %>%
melt(measure.vars = c("lambda.min.beta","lambda.1se.beta"))
d2[,variable:=gsub(".beta", "",variable)]
appender <- function(string) TeX(paste("$\\log(\\lambda_{\\gamma}) = $",string))
p <- ggplot(d,
aes(log(lambda.beta),
ymin = lower,
ymax = upper)) +
geom_errorbar(color = "grey", width = 0.5) +
geom_point(aes(x = log(lambda.beta), y = mse), colour = "red") +
theme_bw() +
ylim(c(min(d$lower) - 10 , max(d$upper) + 500)) +
facet_wrap(~lg, scales = "fixed",
#switch = "x",
labeller = as_labeller(appender, default = label_parsed)) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = rel(1.3)),
legend.position = "bottom") +
xlab(TeX("$\\log(\\lambda_{\\beta})$")) +
geom_vline(data = d2[lambda.gamma==lambda.1se.gamma & variable == "lambda.1se"],
aes(xintercept = log(value), colour = variable), size = 0.7, linetype = 1) +
geom_vline(data = d2[lambda.gamma==lambda.min.gamma & variable == "lambda.min"],
aes(xintercept = log(value), colour = variable),size = 0.7, linetype = 1) +
scale_color_discrete(name="") +
geom_text(aes(label = nz.main, x = log(lambda.beta), y = Inf, vjust = 1)) +
geom_text(aes(label = nz.interaction, x = log(lambda.beta), y = Inf,
vjust = 2)) +
ylab(c("10 fold CV MSE"))
l <- ggplot_build(p)
p + ylim(c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.1))
#suppressMessages(print(plt))
# cvobj = x
# xlab = "log(Lambda)"
# if (sign.lambda < 0)
#   xlab = paste("-", xlab, sep = "")
# plot.args = list(x = sign.lambda * log(cvobj$lambda.beta), y = cvobj$cvm,
#                  ylim = range(cvobj$cvup, cvobj$cvlo),
#                  #ylim = quantile(c(cvobj$cvlo, cvobj$cvup), probs = c(0,0.85)),
#                  xlab = xlab, ylab = cvobj$name,
#                  type = "n")
# new.args = list(...)
# if (length(new.args))
#   plot.args[names(new.args)] = new.args
# do.call("plot", plot.args)
# error.bars(sign.lambda * log(cvobj$lambda.beta), cvobj$cvup,
#            cvobj$cvlo, width = 0.01, col = "darkgrey")
# points(sign.lambda * log(cvobj$lambda.beta), cvobj$cvm, pch = 20,
#        col = "red")
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("main:",cvobj$nz.main),
#      tick = FALSE, line = 1)
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("interaction:",cvobj$nz.interaction),
#      tick = FALSE, line = 0)
# abline(v = sign.lambda * log(cvobj$lambda.min.beta), lty = 3)
# abline(v = sign.lambda * log(cvobj$lambda.1se.beta), lty = 3)
# invisible()
}
plot.cv.shim <- function(x, sign.lambda = 1, ...) {
pckg = try(require(ggplot2))
if(!pckg) {
cat("Installing 'ggplot2' from CRAN\n")
getPckg("ggplot2")
require(ggplot2)
}
pckg = try(require(latex2exp))
if(!pckg) {
cat("Installing 'latex2exp' from CRAN\n")
getPckg("latex2exp")
require(latex2exp)
}
pckg = try(require(data.table))
if(!pckg) {
cat("Installing 'data.table' from CRAN\n")
getPckg("data.table")
require(data.table)
}
cvobj = x
d <- cvobj$df %>%
as.data.table %>%
mutate(lambda.min.beta = cvobj$lambda.min.beta,
lambda.min.gamma = cvobj$lambda.min.gamma,
lambda.1se.beta = cvobj$lambda.1se.beta,
lambda.1se.gamma = cvobj$lambda.1se.gamma)
# needed to get colored lines
d2 <- d[(lambda.beta==lambda.min.beta & lambda.gamma == lambda.min.gamma) |
(lambda.beta==lambda.1se.beta & lambda.gamma == lambda.1se.gamma)] %>%
melt(measure.vars = c("lambda.min.beta","lambda.1se.beta"))
d2[,variable:=gsub(".beta", "",variable)]
appender <- function(string) TeX(paste("$\\log(\\lambda_{\\gamma}) = $",string))
p <- ggplot(d,
aes(log(lambda.beta),
ymin = lower,
ymax = upper)) +
geom_errorbar(color = "grey", width = 0.5) +
geom_point(aes(x = log(lambda.beta), y = mse), colour = "red") +
theme_bw() +
ylim(c(min(d$lower) - 10 , max(d$upper) + 500)) +
facet_wrap(~lg, scales = "fixed",
#switch = "x",
labeller = as_labeller(appender, default = label_parsed)) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = rel(1.3)),
legend.position = "bottom") +
xlab(TeX("$\\log(\\lambda_{\\beta})$")) +
geom_vline(data = d2[lambda.gamma==lambda.1se.gamma & variable == "lambda.1se"],
aes(xintercept = log(value), colour = variable), size = 0.7, linetype = 1) +
geom_vline(data = d2[lambda.gamma==lambda.min.gamma & variable == "lambda.min"],
aes(xintercept = log(value), colour = variable),size = 0.7, linetype = 1) +
scale_color_discrete(name="") +
geom_text(aes(label = nz.main, x = log(lambda.beta), y = Inf, vjust = 1)) +
geom_text(aes(label = nz.interaction, x = log(lambda.beta), y = Inf,
vjust = 2)) +
ylab(c("10 fold CV MSE"))
l <- ggplot_build(p)
p + #ylim(c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.1))
coord_cartesian(ylim = c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.1))
#suppressMessages(print(plt))
# cvobj = x
# xlab = "log(Lambda)"
# if (sign.lambda < 0)
#   xlab = paste("-", xlab, sep = "")
# plot.args = list(x = sign.lambda * log(cvobj$lambda.beta), y = cvobj$cvm,
#                  ylim = range(cvobj$cvup, cvobj$cvlo),
#                  #ylim = quantile(c(cvobj$cvlo, cvobj$cvup), probs = c(0,0.85)),
#                  xlab = xlab, ylab = cvobj$name,
#                  type = "n")
# new.args = list(...)
# if (length(new.args))
#   plot.args[names(new.args)] = new.args
# do.call("plot", plot.args)
# error.bars(sign.lambda * log(cvobj$lambda.beta), cvobj$cvup,
#            cvobj$cvlo, width = 0.01, col = "darkgrey")
# points(sign.lambda * log(cvobj$lambda.beta), cvobj$cvm, pch = 20,
#        col = "red")
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("main:",cvobj$nz.main),
#      tick = FALSE, line = 1)
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("interaction:",cvobj$nz.interaction),
#      tick = FALSE, line = 0)
# abline(v = sign.lambda * log(cvobj$lambda.min.beta), lty = 3)
# abline(v = sign.lambda * log(cvobj$lambda.1se.beta), lty = 3)
# invisible()
}
dev.off()
plot(cvfit)
plot.cv.shim <- function(x, sign.lambda = 1, ...) {
pckg = try(require(ggplot2))
if(!pckg) {
cat("Installing 'ggplot2' from CRAN\n")
getPckg("ggplot2")
require(ggplot2)
}
pckg = try(require(latex2exp))
if(!pckg) {
cat("Installing 'latex2exp' from CRAN\n")
getPckg("latex2exp")
require(latex2exp)
}
pckg = try(require(data.table))
if(!pckg) {
cat("Installing 'data.table' from CRAN\n")
getPckg("data.table")
require(data.table)
}
cvobj = x
d <- cvobj$df %>%
as.data.table %>%
mutate(lambda.min.beta = cvobj$lambda.min.beta,
lambda.min.gamma = cvobj$lambda.min.gamma,
lambda.1se.beta = cvobj$lambda.1se.beta,
lambda.1se.gamma = cvobj$lambda.1se.gamma)
# needed to get colored lines
d2 <- d[(lambda.beta==lambda.min.beta & lambda.gamma == lambda.min.gamma) |
(lambda.beta==lambda.1se.beta & lambda.gamma == lambda.1se.gamma)] %>%
melt(measure.vars = c("lambda.min.beta","lambda.1se.beta"))
d2[,variable:=gsub(".beta", "",variable)]
appender <- function(string) TeX(paste("$\\log(\\lambda_{\\gamma}) = $",string))
p <- ggplot(d,
aes(log(lambda.beta),
ymin = lower,
ymax = upper))
l <- ggplot_build(p)
p + #ylim(c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.1))
geom_errorbar(color = "grey", width = 0.5) +
geom_point(aes(x = log(lambda.beta), y = mse), colour = "red") +
theme_bw() +
ylim(c(min(d$lower) - 10 , max(d$upper) + 500)) +
facet_wrap(~lg, scales = "fixed",
#switch = "x",
labeller = as_labeller(appender, default = label_parsed)) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = rel(1.3)),
legend.position = "bottom") +
xlab(TeX("$\\log(\\lambda_{\\beta})$")) +
geom_vline(data = d2[lambda.gamma==lambda.1se.gamma & variable == "lambda.1se"],
aes(xintercept = log(value), colour = variable), size = 0.7, linetype = 1) +
geom_vline(data = d2[lambda.gamma==lambda.min.gamma & variable == "lambda.min"],
aes(xintercept = log(value), colour = variable),size = 0.7, linetype = 1) +
scale_color_discrete(name="") +
geom_text(aes(label = nz.main, x = log(lambda.beta), y = Inf, vjust = 1)) +
geom_text(aes(label = nz.interaction, x = log(lambda.beta), y = Inf,
vjust = 2)) +
ylab(c("10 fold CV MSE")) +
coord_cartesian(ylim = c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.1))
#suppressMessages(print(plt))
# cvobj = x
# xlab = "log(Lambda)"
# if (sign.lambda < 0)
#   xlab = paste("-", xlab, sep = "")
# plot.args = list(x = sign.lambda * log(cvobj$lambda.beta), y = cvobj$cvm,
#                  ylim = range(cvobj$cvup, cvobj$cvlo),
#                  #ylim = quantile(c(cvobj$cvlo, cvobj$cvup), probs = c(0,0.85)),
#                  xlab = xlab, ylab = cvobj$name,
#                  type = "n")
# new.args = list(...)
# if (length(new.args))
#   plot.args[names(new.args)] = new.args
# do.call("plot", plot.args)
# error.bars(sign.lambda * log(cvobj$lambda.beta), cvobj$cvup,
#            cvobj$cvlo, width = 0.01, col = "darkgrey")
# points(sign.lambda * log(cvobj$lambda.beta), cvobj$cvm, pch = 20,
#        col = "red")
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("main:",cvobj$nz.main),
#      tick = FALSE, line = 1)
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("interaction:",cvobj$nz.interaction),
#      tick = FALSE, line = 0)
# abline(v = sign.lambda * log(cvobj$lambda.min.beta), lty = 3)
# abline(v = sign.lambda * log(cvobj$lambda.1se.beta), lty = 3)
# invisible()
}
dev.off()
plot(cvfit)
plot.cv.shim <- function(x, sign.lambda = 1, ...) {
pckg = try(require(ggplot2))
if(!pckg) {
cat("Installing 'ggplot2' from CRAN\n")
getPckg("ggplot2")
require(ggplot2)
}
pckg = try(require(latex2exp))
if(!pckg) {
cat("Installing 'latex2exp' from CRAN\n")
getPckg("latex2exp")
require(latex2exp)
}
pckg = try(require(data.table))
if(!pckg) {
cat("Installing 'data.table' from CRAN\n")
getPckg("data.table")
require(data.table)
}
cvobj = x
d <- cvobj$df %>%
as.data.table %>%
mutate(lambda.min.beta = cvobj$lambda.min.beta,
lambda.min.gamma = cvobj$lambda.min.gamma,
lambda.1se.beta = cvobj$lambda.1se.beta,
lambda.1se.gamma = cvobj$lambda.1se.gamma)
# needed to get colored lines
d2 <- d[(lambda.beta==lambda.min.beta & lambda.gamma == lambda.min.gamma) |
(lambda.beta==lambda.1se.beta & lambda.gamma == lambda.1se.gamma)] %>%
melt(measure.vars = c("lambda.min.beta","lambda.1se.beta"))
d2[,variable:=gsub(".beta", "",variable)]
appender <- function(string) TeX(paste("$\\log(\\lambda_{\\gamma}) = $",string))
p <- ggplot(d,
aes(log(lambda.beta),
ymin = lower,
ymax = upper))
l <- ggplot_build(p)
p + #ylim(c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.1))
geom_errorbar(color = "grey", width = 0.5) +
geom_point(aes(x = log(lambda.beta), y = mse), colour = "red") +
theme_bw() +
ylim(c(min(d$lower) - 10 , max(d$upper) + 500)) +
facet_wrap(~lg, scales = "fixed",
#switch = "x",
labeller = as_labeller(appender, default = label_parsed)) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = rel(1.3)),
legend.position = "bottom") +
xlab(TeX("$\\log(\\lambda_{\\beta})$")) +
geom_vline(data = d2[lambda.gamma==lambda.1se.gamma & variable == "lambda.1se"],
aes(xintercept = log(value), colour = variable), size = 0.7, linetype = 1) +
geom_vline(data = d2[lambda.gamma==lambda.min.gamma & variable == "lambda.min"],
aes(xintercept = log(value), colour = variable),size = 0.7, linetype = 1) +
scale_color_discrete(name="") +
geom_text(aes(label = nz.main, x = log(lambda.beta), y = Inf, vjust = 1)) +
geom_text(aes(label = nz.interaction, x = log(lambda.beta), y = Inf,
vjust = 2)) +
ylab(c("10 fold CV MSE")) +
coord_cartesian(ylim = c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.5))
#suppressMessages(print(plt))
# cvobj = x
# xlab = "log(Lambda)"
# if (sign.lambda < 0)
#   xlab = paste("-", xlab, sep = "")
# plot.args = list(x = sign.lambda * log(cvobj$lambda.beta), y = cvobj$cvm,
#                  ylim = range(cvobj$cvup, cvobj$cvlo),
#                  #ylim = quantile(c(cvobj$cvlo, cvobj$cvup), probs = c(0,0.85)),
#                  xlab = xlab, ylab = cvobj$name,
#                  type = "n")
# new.args = list(...)
# if (length(new.args))
#   plot.args[names(new.args)] = new.args
# do.call("plot", plot.args)
# error.bars(sign.lambda * log(cvobj$lambda.beta), cvobj$cvup,
#            cvobj$cvlo, width = 0.01, col = "darkgrey")
# points(sign.lambda * log(cvobj$lambda.beta), cvobj$cvm, pch = 20,
#        col = "red")
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("main:",cvobj$nz.main),
#      tick = FALSE, line = 1)
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("interaction:",cvobj$nz.interaction),
#      tick = FALSE, line = 0)
# abline(v = sign.lambda * log(cvobj$lambda.min.beta), lty = 3)
# abline(v = sign.lambda * log(cvobj$lambda.1se.beta), lty = 3)
# invisible()
}
dev.off()
plot(cvfit)
plot.cv.shim <- function(x, sign.lambda = 1, ...) {
pckg = try(require(ggplot2))
if(!pckg) {
cat("Installing 'ggplot2' from CRAN\n")
getPckg("ggplot2")
require(ggplot2)
}
pckg = try(require(latex2exp))
if(!pckg) {
cat("Installing 'latex2exp' from CRAN\n")
getPckg("latex2exp")
require(latex2exp)
}
pckg = try(require(data.table))
if(!pckg) {
cat("Installing 'data.table' from CRAN\n")
getPckg("data.table")
require(data.table)
}
cvobj = x
d <- cvobj$df %>%
as.data.table %>%
mutate(lambda.min.beta = cvobj$lambda.min.beta,
lambda.min.gamma = cvobj$lambda.min.gamma,
lambda.1se.beta = cvobj$lambda.1se.beta,
lambda.1se.gamma = cvobj$lambda.1se.gamma)
# needed to get colored lines
d2 <- d[(lambda.beta==lambda.min.beta & lambda.gamma == lambda.min.gamma) |
(lambda.beta==lambda.1se.beta & lambda.gamma == lambda.1se.gamma)] %>%
melt(measure.vars = c("lambda.min.beta","lambda.1se.beta"))
d2[,variable:=gsub(".beta", "",variable)]
appender <- function(string) TeX(paste("$\\log(\\lambda_{\\gamma}) = $",string))
p <- ggplot(d,
aes(log(lambda.beta),
ymin = lower,
ymax = upper))
l <- ggplot_build(p)
p +
geom_errorbar(color = "grey", width = 0.5) +
geom_point(aes(x = log(lambda.beta), y = mse), colour = "red") +
theme_bw() +
ylim(c(min(d$lower) - 10 , max(d$upper) + 500)) +
facet_wrap(~lg, scales = "fixed",
#switch = "x",
labeller = as_labeller(appender, default = label_parsed)) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = rel(1.3)),
legend.position = "bottom") +
xlab(TeX("$\\log(\\lambda_{\\beta})$")) +
geom_vline(data = d2[lambda.gamma==lambda.1se.gamma & variable == "lambda.1se"],
aes(xintercept = log(value), colour = variable), size = 0.7, linetype = 1) +
geom_vline(data = d2[lambda.gamma==lambda.min.gamma & variable == "lambda.min"],
aes(xintercept = log(value), colour = variable),size = 0.7, linetype = 1) +
scale_color_discrete(name="") +
geom_text(aes(label = nz.main, x = log(lambda.beta), y = Inf, vjust = 1)) +
geom_text(aes(label = nz.interaction, x = log(lambda.beta), y = Inf,
vjust = 2)) +
ylab(c("10 fold CV MSE")) +
coord_cartesian(ylim = c(l$panel$ranges[[1]]$y.range[1], l$panel$ranges[[1]]$y.range[2]*1.1))
# cvobj = x
# xlab = "log(Lambda)"
# if (sign.lambda < 0)
#   xlab = paste("-", xlab, sep = "")
# plot.args = list(x = sign.lambda * log(cvobj$lambda.beta), y = cvobj$cvm,
#                  ylim = range(cvobj$cvup, cvobj$cvlo),
#                  #ylim = quantile(c(cvobj$cvlo, cvobj$cvup), probs = c(0,0.85)),
#                  xlab = xlab, ylab = cvobj$name,
#                  type = "n")
# new.args = list(...)
# if (length(new.args))
#   plot.args[names(new.args)] = new.args
# do.call("plot", plot.args)
# error.bars(sign.lambda * log(cvobj$lambda.beta), cvobj$cvup,
#            cvobj$cvlo, width = 0.01, col = "darkgrey")
# points(sign.lambda * log(cvobj$lambda.beta), cvobj$cvm, pch = 20,
#        col = "red")
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("main:",cvobj$nz.main),
#      tick = FALSE, line = 1)
# axis(side = 3, at = sign.lambda * log(cvobj$lambda.beta), labels = paste("interaction:",cvobj$nz.interaction),
#      tick = FALSE, line = 0)
# abline(v = sign.lambda * log(cvobj$lambda.min.beta), lty = 3)
# abline(v = sign.lambda * log(cvobj$lambda.1se.beta), lty = 3)
# invisible()
}
dev.off()
plot(cvfit)
dev.off()
rm(list = ls())
options(scipen=999, digits = 9)
source("packages.R")
source("data.R")
source("https://raw.githubusercontent.com/noamross/noamtools/master/R/proftable.R")
#source("~/Dropbox/Winter 2014/MATH 783/Assignments/A3/multiplot.R")
source("functions.R")
library(ggrepel)
library(latex2exp)
library(gridExtra)
library(cowplot)
# crossvalidation ---------------------------------------------------------
require(doMC)
registerDoMC(cores=10)
adaptive.weights <- ridge_weights(x = X, y = Y,
main.effect.names = main_effect_names,
interaction.names = interaction_names)
lgg <- lambda_sequence(x = X[,interaction_names,drop=F],
y = Y,
weights = adaptive.weights[interaction_names,,drop=F],
#weights = rep(1, length(interaction_names)),
nlambda = 6);lg
lbb <- lambda_sequence(x = X[,main_effect_names,drop=F],
y = Y,
weights = adaptive.weights[main_effect_names,,drop=F],
#weights = rep(1, length(main_effect_names)),
nlambda = 10);lb
lg <- rep(lgg, each = length(lbb));lg
lb <- rep(lbb, times = length(lgg));lb
system.time(cvfit <- cv.shim(x = X, y = Y, main.effect.names = main_effect_names,
interaction.names = interaction_names,
lambda.beta = lb ,
lambda.gamma = lg,
threshold = 1e-4 , max.iter = 200 ,
initialization.type = "ridge",
intercept = TRUE, normalize = TRUE,
nlambda.gamma = 6, nlambda.beta = 10, cores = 1,
nlambda = 60,
type.measure = c("mse", "deviance", "class", "auc", "mae"),
nfolds = 10, grouped = TRUE, keep = FALSE, parallel = TRUE))
plot(cvfit)
209/60
